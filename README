OANotes for rails
=======

"OANotes" as in "Orion's Apotomo Notes".
This Notes widget makes easy to add notes functionality to any rails application.


Pre-requisits
=============

OAWidget, see: http://github.com/Orion98MC/oa_widget


Install
=======

$ cd my_rails_app
$ ./script/plugins install git://github.com/Orion98MC/oa_notes.git

Then, you have to sync the public resources of the plugin to your app's public directory:

$ rake oa_notes:sync_resources

Since you want to manage Notes, you need to have a note model.
By default, OANotes assumes you have a "Note" model. You may create one with the following:

$ ./script/generate model Note content:text
$ rake db:migrate

If you already have a model for the notes you must specify :notes => "MyNoteClass"

Usage
=====

#  OANotes::Container.new("notes", OPTIONS)
#
#  OPTIONS: A hash with following options:
#
#  :notes => string (ex: :notes => "@intervention.notes" or :notes => "MyNote")
#  :save => lambda {|config| ...save config hash... } 
#
# scopes:
#  :search => a named scope of the model used for searches, it receives self as parameter when called.
#  :views => [['My scope 1', :scope1], ...] an array of named scopes for view filter 
#  :sorts => [['My filter 1', :filter1], ...] an array of named scopes for the sorting filter
#
# marks:
#  :has_markings? => true or false (default: false)
#  :toogle_mark! => a model method name, the method is called when the user marks or unmarks a note and is passed the note as parameter
#  :marked? => a model method name, the method is called with note as parameter. Must return true or false
#
# customizations:
#  :hide => [:search, :filters, :content, :form]
#  :pages => [['5', 5], ['Many', 100], ...] an array of per_pages for the per_page filter
#  :note_partial => 'partial/path' the partial to use when rendering notes. it is passed a :note locals
#  :form_partial => 'partial/path' the partial to use when rendering the form. it is passed a :note locals
#  :title => string, this is the title to be displayed in the widget's title bar
#
# Authorizations:
# ===============
# By default, all is allowed, to allow/forbid delete/create/update/mark notes you can create a Authorizations module in OANote module
# Put it in app/cells/oa_notes.rb, here is an example:
#
# module OANotes
#   module Authorizations
#     def delete?(note)
#       can? :delete, note
#     end
#
#     def create?(note)
#       can? :create, note.class
#     end
#
#     def update?(note)
#       can? :update, note
#     end
#     
#     def toogle_mark?(note)
#       can? :toogle_mark, note
#     end
#   end
# end
#
# Example:
# ========
# class DashboardController < ApplicationController
#   include Apotomo::Rails::ControllerMethods
#   ...
#   has_widgets do |root|
#     root < OANotes::Container.new('notes', 
#       :title => 'My notes', 
#       :notes => "@current_user.notes", 
#       :search => :search, 
#       :note_partial => 'partials/user_note',
#     )
#   end
#   
#   def show
#   end
#   ...
# end
#
# in views/dashboard/show.haml.html:
# ...
#   = render_widget 'notes'
# ...


example 1:
----------

has_widgets do |root|
  root << OANotes::Container.new('notes', :title => 'My notes')
end

> This creates a Notes widget named 'notes' with a special title.


example 2:
----------

has_widgets do |root|
  root << OANotes::Container.new('notes', 
	:title => 'My notes',
	:hide => [:form],
	:search => :search,
	:views => [['All', nil], ['Recent', :recent]],
	:sorts => [['Date (^)', :by_date_asc], ['Date (v)', :by_date_desc]]
	)
end

> This creates a Notes widget with a hidden form (you can create new notes but the form is hidden by default),
  the notes are searchable, using the :search named scope of the model,
  two views are allowed, one for viewing all records, the other for view recent notes using the :recent named scope of the model
  two sorts are allowed, on for sorting creation date ascending using a :by_date_asc named scope of the model.

The Note model could look like this:
class Note < ActiveRecord::Base
	named_scope :search, lambda{|arg| 
	  query = (arg.is_a? AONotes::Container) ? arg.search_text : arg
	  {:conditions => ["content LIKE ?", "%#{query}%"]}
	}
	
	named_scope :recent, lambda{ {:conditions => ["updated_at >= ?", 2.days.ago]}}
	named_scope :by_date_asc, lambda{ {:order => "created_at ASC"}}
	named_scope :by_date_desc, lambda{ {:order => "created_at DESC"}}
end


Copyright (c) 2010 Thierry Passeron (thierry.passeron@gmail.com), released under the MIT license
